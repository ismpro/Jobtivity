/**
 * @module LoggerCodes
 * @description This module exports a middleware function that utilizes the 'morgan' library to log requests made to the server.
 * The middleware function takes in the request and response objects and logs information about the request such as the IP address, method, url, response time, and the HTTP status code.
 * The function also uses the 'chalk' library to color code the status codes based on predefined codes and messages.
*/
const morgan = require('morgan');
const chalk = require('chalk');

var codes = [
    {
        "code": 200,
        "message": "Request Accepted",
        "color": "#00ff00"
    },
    {
        "code": 201,
        "message": "Request Created",
        "color": "#00ff00"
    },
    {
        "code": 209,
        "message": "Link Expired",
        "color": "#cc0000"
    },
    {
        "code": 215,
        "message": "Validation Failed",
        "color": "#ffff00"
    },
    {
        "code": 216,
        "message": "Friend request already sent",
        "color": "#ffff00"
    },
    {
        "code": 217,
        "message": "This email does not exists",
        "color": "#ffff00"
    },
    {
        "code": 304,
        "message": "Request Not Modified",
        "color": "#ffff00"
    },
    {
        "code": 401,
        "message": "Request Unauthorized",
        "color": "#0000ff"
    },
    {
        "code": 404,
        "message": "Request Not Found",
        "color": "#cc0000"
    },
    {
        "code": 417,
        "message": "Request With Expectation Failed",
        "color": "#9900cc"
    },
    {
        "code": 501,
        "message": "Request Not Implemented",
        "color": "#cc0000"
    },
    {
        "code": 500,
        "message": "Server Error",
        "color": "#cc0000"
    }
]
/**
 * Logger function that checks the status code of a request and returns the corresponding message and color
 * @function 
 * @param {Number} code - The status code of the request
 * @returns {{code: Number, message: String, color: String}} - An object containing the code, message and color for the corresponding status code
 * @throws {Error} - Will throw an error if no code is provided or if the code is not found in the list of codes
 */
function loggerCodes(code) {

    if (!code) {
        throw new Error('Code Not Sent')
    }

    // find the corresponding code in the list of codes
    let findedCode = codes.find((element) => {
        return element.code == code
    })

    if (!findedCode) {
        throw new Error('Code Not Found')
    } else {
        return findedCode;
    }
}

/**
 * @function
 * @param {Object} tokens - The tokens generated by morgan
 * @param {Object} req - The request object
 * @param {Object} res - The response object
 * @returns {String} - A string with the log message including information about the request and the status code
 */
module.exports = morgan(function (tokens, req, res) {
    try {
        // check if the IP is localhost
        let ip = Boolean(
            tokens['remote-addr'](req, res) === '::1' ||
            tokens['remote-addr'](req, res) === '[::1]' ||
            // 127.0.0.1/8 is considered localhost for IPv4.
            tokens['remote-addr'](req, res).match(
                /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
            ) ||
            tokens['remote-addr'](req, res) === '0000:0000:0000:0000:0000:0000:0000:0001'
        ) ? 'localhost' : tokens['remote-addr'](req, res);

        // get the corresponding code and message for the status code
        let status = loggerCodes(tokens.status(req, res))
        // return the log message with the request details, response time and the color coded status code
        return `\nRequest: ${ip} ${tokens.method(req, res)} ${tokens.url(req, res)} - ${tokens['response-time'](req, res)}
    Code: ${chalk.hex(status.color)(status.code)} -> ${status.message}`
    } catch (error) {
        //Makes a default morgan log for no code
        if (error.message === 'Code Not Found') {
            return `\nRequest: ${tokens.method(req, res)} ${tokens.url(req, res)} - ${tokens['response-time'](req, res)}
    Code: ${tokens.status(req, res)}`
        }
        else { console.error("Error on logger") }
    }
})
